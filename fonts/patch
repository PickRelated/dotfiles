#!/usr/bin/env python

from __future__ import division

import argparse
import os
import sys
import re

try:
    import fontforge
    import psMat
except ImportError:
    sys.stderr.write('The required FontForge modules could not be loaded.\n\n')
    if sys.version_info.major > 2:
        sys.stderr.write('FontForge only supports Python 2. Please run this script with the Python 2 executable - e.g. "python2 {0}"\n'.format(sys.argv[0]))
    else:
        sys.stderr.write('You need FontForge with Python bindings for this script to work.\n')
    sys.exit(1)

# Handle command-line arguments
parser = argparse.ArgumentParser(description='Add one font glyphs (mostly symbols) to another one')
parser.add_argument('target_font_path', help='font file to patch', metavar='target')
parser.add_argument('--symbols', help='font file with symbols', dest='symbols_font_path')
parser.add_argument('--rename-as', help='name of the resulting patched font', dest='rename_as')
parser.add_argument('--starting-at', help='codepoint where to start to copy symbols', dest='starting_at', default='0xe000')
parser.add_argument('--to-namespace', help='all the copied glyphs shall be renamed as <NAMESPACE>_<ORIGINAL_NAME>', dest='to_namespace')
parser.add_argument('--ratio', help='how much to force to scale proportionally the symbols glyphs', dest='ratio', default='1.0')
parser.add_argument('--shift-x', help='how much to force to shift the symbols glyphs', dest='shift_x', default='0.0')
parser.add_argument('--shift-y', help='how much to force to shift the symbols glyphs', dest='shift_y', default='0.0')

args = parser.parse_args()


def open_font(font_path):
    try:
        return fontforge.open(font_path)
    except EnvironmentError:
        sys.stderr.write('Unable to find font file {0}\n'.format(font_path))
        sys.exit(1)

def force_em_size_to_be_equal(source, target):
    source.em = target.em

def bounding_box_of(font):
    bounding_box = {
        'xmin': sys.maxsize,
        'ymin': sys.maxsize,
        'xmax': -sys.maxsize,
        'ymax': -sys.maxsize,
        'width': 0,
        'height': 0
    }

    for glyph in font.glyphs():
        try:
            (xmin, ymin, xmax, ymax) = glyph.boundingBox()
            if ymin < bounding_box['ymin']: bounding_box['ymin'] = ymin
            if ymax > bounding_box['ymax']: bounding_box['ymax'] = ymax
            if xmin < bounding_box['xmin']: bounding_box['xmin'] = xmin
            if xmax > bounding_box['xmax']: bounding_box['xmax'] = xmax
        except TypeError:
            continue

    bounding_box['width'] = bounding_box['xmax'] - bounding_box['xmin']
    bounding_box['height'] = bounding_box['ymax'] - bounding_box['ymin']

    return bounding_box

def bounding_box_of_pickrelated(font):
    bounding_box = {
        'xmin': sys.maxsize,
        'ymin': sys.maxsize,
        'xmax': -sys.maxsize,
        'ymax': -sys.maxsize,
        'width': 0,
        'height': 0
    }

    for glyph in font.glyphs():
        try:
            (xmin, ymin, xmax, ymax) = glyph.boundingBox()
            try:
                print(xmin, xmax, chr(glyph.unicode))
            except:
                continue
            if ymin < bounding_box['ymin']: bounding_box['ymin'] = ymin
            if ymax > bounding_box['ymax']: bounding_box['ymax'] = ymax
            if xmin < bounding_box['xmin']: bounding_box['xmin'] = xmin
            if xmax > bounding_box['xmax']: bounding_box['xmax'] = xmax
        except TypeError:
            continue

    print(bounding_box['xmax'])

    bounding_box['width'] = bounding_box['xmax'] - bounding_box['xmin']
    bounding_box['height'] = bounding_box['ymax'] - bounding_box['ymin']

    return bounding_box

def adapt(source_bb, target_bb, forced_ratio, forced_shift_x, forced_shift_y):
    # Preserve the target height, adapt the sources's height proportionally 
    print ('forced ratio:{0} shift on x:{1} y:{2}'.format(forced_ratio, forced_shift_x, forced_shift_y))
    ratio = (target_bb['height'] / source_bb['height'] * forced_ratio)
    stretch = psMat.scale(ratio)
    print ('from {0} to {1} scale Y of {2}'.format(target_bb['height'], source_bb['height'], ratio))
    # Center align source font to the target font
    move_on_x = (target_bb['xmin']+target_bb['width']/2) - (source_bb['xmin']+source_bb['width']/2) + forced_shift_x
    move_on_y = (target_bb['ymin']+target_bb['height']/2) - (source_bb['ymin']+source_bb['height']/2) + forced_shift_y
    center = psMat.translate(move_on_x, move_on_y)
    print ('move X,Y of {0},{1}'.format(move_on_x, move_on_y))
    return psMat.compose(stretch, center)

symbols = open_font(args.symbols_font_path)
font = open_font(args.target_font_path)

font.encoding = 'ISO10646'
force_em_size_to_be_equal(symbols, font)
if args.rename_as:
    font.fontname = args.rename_as.replace(' ', '')
    font.familyname = args.rename_as
    font.fullname = args.rename_as
    font.appendSFNTName('English (US)', 'Preferred Family', font.familyname)
    font.appendSFNTName('English (US)', 'Compatible Full', font.fullname)

ratio = float(args.ratio)
shift_x = float(args.shift_x)
shift_y = float(args.shift_y)
font_bounding_box = bounding_box_of(font)
symbols_bounding_box = bounding_box_of_pickrelated(symbols)
symbol_to_font = adapt(symbols_bounding_box, font_bounding_box, ratio, shift_x, shift_y)
symbol_codepoint = int(args.starting_at, 0)
name_to_codepoint = {}


for symbol in symbols.glyphs("encoding"):
    if symbol.width > 0 and symbol.unicode > 0xFF:
      symbols.selection.select(symbol.encoding)
      symbols.copy()
      symbol_name = symbol.glyphname
      if args.to_namespace:
        symbol_name = "{0}_{1}".format(args.to_namespace.upper(), symbol.glyphname.upper().replace('-', '_'))
      font.selection.select(symbol.unicode)
      font.paste()
      font.transform(symbol_to_font)
      font.createMappedChar(symbol_codepoint).glyphname = symbol_name
      symbol_codepoint += 1

output_name, extension = os.path.split(args.target_font_path)[1].rsplit('.', 1)
if args.rename_as:
    output_name = args.rename_as.replace(' ', '+')

if args.to_namespace:
  f = open('{0}.sh'.format(output_name), 'w+')
  f.write("{0}_GLYPHS_LOADED=1\n".format(args.to_namespace.upper()))
  for name, codepoint in name_to_codepoint.items():
    f.write("CODEPOINT_OF_{0}='{1:x}'\n".format(name, codepoint))
  f.close()

font.generate('{0}.{1}'.format(output_name, extension))

patched_bounding_box = bounding_box_of(font)

print (font_bounding_box)
print (symbols_bounding_box)
print (patched_bounding_box)
print ("center before was {0},{1}, now is {2},{3}".format(
  font_bounding_box['xmin']+font_bounding_box['width']/2,
  font_bounding_box['ymin']+font_bounding_box['height']/2,
  patched_bounding_box['xmin']+patched_bounding_box['width']/2,
  patched_bounding_box['ymin']+patched_bounding_box['height']/2
))
